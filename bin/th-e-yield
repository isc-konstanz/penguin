#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
    th-e-yield
    ~~~~~~~~~~
    
    To learn how to configure the photovoltaic yield calculation, see "th-e-yield --help"

"""
import os
import time
import sched
import inspect
import datetime as dt

from argparse import ArgumentParser, RawTextHelpFormatter
from th_e_core import Settings, Configurations
from th_e_yield import System


def main(**kwargs) -> None:
    action = kwargs.pop('action')
    interval = kwargs.pop('interval', 1)

    systems = System.read(settings)
    if action == 'run':
        run(systems)

    elif action == 'start':
        start(systems, interval)

    elif action == 'build':
        build(settings)


def run(systems):
    systems()


def start(systems, interval):
    logger.info('Starting th-e-yield')

    scheduler = sched.scheduler(time.time, time.sleep)
    schedule_first, _ = schedule_time(interval)
    schedule_first -= dt.timedelta(seconds=int(interval))
    schedule_run(systems, scheduler, schedule_first, interval)
    scheduler.run()


def schedule_run(systems, scheduler, date, interval):
    logger.info("Running th-e-yield for {0} systems".format(len(systems)))

    for system in systems:
        system(start=date)

    date, delay = schedule_time(interval)
    scheduler.enter(delay, 1, schedule_run,
                    (systems, scheduler, date, interval))

    logger.info("Schedule next execution in {0} seconds: {1}".format(round(delay), date))


def schedule_time(interval, delay=0):
    if isinstance(interval, str):
        interval = int(interval)

    now = dt.datetime.now()
    date = now + ((dt.datetime.min - now) % dt.timedelta(seconds=interval))

    return date, (date - now).total_seconds() + int(delay)


def build(settings: Configurations, clean: bool = False):
    from th_e_yield.pv import ModuleDatabase, InverterDatabase

    logger.info('Starting module library build')
    modules = ModuleDatabase(settings)
    if clean:
        modules.clean()
    modules.build()

    logger.info('Starting inverter library build')
    inverters = InverterDatabase(settings)
    if clean:
        inverters.clean()
    inverters.build()


def _get_parser():
    from th_e_yield import __version__

    parser = ArgumentParser(description=__doc__, formatter_class=RawTextHelpFormatter)
    parser.add_argument('-v', '--version',
                        action='version',
                        version='%(prog)s {version}'.format(version=__version__))

    subparsers = parser.add_subparsers(dest='action')
    subparsers.required = True
    subparsers.add_parser('run', help='Retrieve weather information and provide the calculated photovoltaic yield')
    subparsers.add_parser('start', help='Starts the ongoing calculation of photovoltaic yield in a regular interval')
    subparsers.add_parser('build', help='Build the module and inverter database')

    return parser


if __name__ == "__main__":
    run_dir = os.path.dirname(os.path.abspath(inspect.getsourcefile(main)))
    if os.path.basename(run_dir) == 'bin':
        run_dir = os.path.dirname(run_dir)

    os.chdir(run_dir)

    settings = Settings('th-e-srvy', parser=_get_parser())

    import logging
    logger = logging.getLogger('th-e-srvy')
    main(**settings.general)
